cmake_policy(VERSION "3.25.0")
set(reserved 
  ALL "\"=\"" "\"==\"" "\"+\"" "\"-\"" "\"%\"" "\"*\"" "\"/\"" "\"<\"" "\">\"" "\"<=\"" "\">=\""
  JS "\"break\"" "\"case\"" "\"catch\"" "\"class\"" "\"const\"" "\"continue\"" "\"debugger\"" "\"default\"" "\"delete\"" "\"do\"" "\"else\"" "\"eval\"" "\"finally\"" "\"for\"" "\"function\"" "\"if\"" "\"import\"" "\"in\"" "\"instanceof\"" "\"let\"" "\"return\"" "\"switch\"" "\"throw\"" "\"try\"" "\"typeof\"" "\"var\"" "\"void\"" "\"with\""
  LUA "\"and\"" "\"end\"" "\"in\"" "\"load\"" "\"repeat\"" "\"while\"" "\"break\"" "\"false\"" "\"local\"" "\"return\"" "\"do\"" "\"for\"" "\"nil\"" "\"then\"" "\"else\"" "\"function\"" "\"not\"" "\"true\"" "\"elseif\"" "\"if\"" "\"or\"" "\"until\""
  PY "\"and\"" "\"except\"" "\"lambda\"" "\"with\"" "\"as\"" "\"finally\"" "\"nonlocal\"" "\"while\"" "\"assert\"" "\"false\"" "\"None\"" "\"yield\"" "\"break\"" "\"for\"" "\"not\"" "\"class\"" "\"from\"" "\"or\"" "\"continue\"" "\"global\"" "\"pass\"" "\"def\"" "\"if\"" "\"raise\"" "\"del\"" "\"import\"" "\"return\"" "\"elif\"" "\"in\"" "\"True\"" "\"else\"" "\"is\"" "\"try\"" "\"from\"" "\"str\"" "\"print\""
  CMAKE "\"set\"" "\"foreach\"" "\"endforeach\"" "\"while\"" "\"endwhile\"" "\"if\"" "\"elseif\"" "\"else\"" "\"block\"" "\"endblock\"" "\"macro\"" "\"endmacro\"" "\"function\"" "\"endfunction\"" "\"break\"" "\"return\"" "\"continue\"" "\"AND\"" "\"OR\"" "\"TRUE\"" "\"FALSE\"" "\"ON\"" "\"OFF\"" "\"Y\"" "\"N\""
)
message("hi")
message("${reserved}")
message("${reserved}")
if(4 GREATER 3)
  message("yes")
else()
  message("no")
endif()
string(LENGTH "foo" _N)
message("${_N}")
function(foo VAR)
  set("${VAR}" 42)
  return(PROPAGATE "${VAR}")
endfunction()
foo(X)
message("${X}")
function(strlen x VAR)
  string(LENGTH "${x}" "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
strlen("foobar" _N)
message("$N: " "${_N}")
unset(_N)
function(count x VAR)
  list(LENGTH x "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
function(err)
  message(FATAL_ERROR ${ARGN})
  return()
endfunction()
set(l "a" "b" "c" "d" "e" "f" "g")
count("${l}" _N)
message("count: " "${_N}")
unset(_N)
set(__e "")
if(4 GREATER 3 AND 2)
  set(__e "yes")
else()
  set(__e "no")
endif()
message("${__e}")
set(RGBA_LIST0 0 0 0 255 0 0 255 0 255 0 255 0 0 255 255 0)
message("${RGBA_LIST0}")
message("${RGBA_LIST0}")
set(RGBA_LIST0 0 0 0 255 0 0 255 0 255 0 255 0 0 255 255 0)
while(RGBA_LIST0)
  list(POP_FRONT RGBA_LIST0 R G B A)
  message(STATUS "R=${R}, G=${G}, B=${B}, A=${A}")
endwhile()
set(__step_v2 0 0 0 255 0 0 255 0 255 0 255 0 0 255 255 0)
while(__step_v2)
  list(POP_FRONT __step_v2 R G B A)
  message(STATUS "R=${R}, G=${G}, B=${B}, A=${A}")
endwhile()
set(__step_v3 "a" "b" "c" "d")
while(__step_v3)
  list(POP_FRONT __step_v3 x)
  message("${x}")
endwhile()
message("$ENV{PATH}")
function(replace input pattern replacement VAR)
  string(REPLACE "${pattern}" "${replacement}" "${VAR}" "${input}")
  return(PROPAGATE "${VAR}")
endfunction()
replace("$ENV{PATH}" ":" ";" PATH)
message("$PATH: " "${PATH}")
set(__step_v4 "${PATH}")
while(__step_v4)
  list(POP_FRONT __step_v4 x)
  message("PATH:" "${x}")
endwhile()
function(blank63 x VAR)
  if("${x}" STREQUAL "")
    set("${VAR}" ON)
  else()
    set("${VAR}" OFF)
  endif()
  return(PROPAGATE "${VAR}")
endfunction()
function(is63 x VAR)
  strlen("${x}" n)
  set(__e1 "")
  if("${n}" GREATER 0)
    set(__e1 ON)
  else()
    set(__e1 OFF)
  endif()
  set("${VAR}" "${__e1}")
  return(PROPAGATE "${VAR}")
endfunction()
set(HOME "$ENV{HOME}")
set(NOH_ROOT "$ENV{HOME}/ml/noh4")
set(SPEEDTREE_DIR "${NOH_ROOT}/lib/SpeedTree")
set(SPEEDTREE_SOURCE_DIR "${SPEEDTREE_DIR}/source/SourceCode")
set(SPEEDTREE_INCLUDE_DIR "${SPEEDTREE_DIR}/include")
file(GLOB_RECURSE SpeedTree___cpp "${SPEEDTREE_SOURCE_DIR}/*.cpp")
set(__step_v5 "${SpeedTree___cpp}")
while(__step_v5)
  list(POP_FRONT __step_v5 x)
  message("${x}")
endwhile()
function(match63 input pattern VAR)
  string(REGEX MATCH "${pattern}" x "${input}")
  is63("${x}" "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
file(GLOB_RECURSE files "*")
set(__step_v6 "${files}")
while(__step_v6)
  list(POP_FRONT __step_v6 x)
  match63("${x}" "[.]l$" ok)
  if("${ok}")
    message("${x}")
  endif()
endwhile()
blank63("foo" _)
message(STATUS "(blank? \"foo\"): " "${_}")
blank63("" _)
message(STATUS "(blank? \"\"): " "${_}")
function(call f)
  cmake_language(CALL "${f}" ${ARGN})
  return()
endfunction()
call(message "hi")
function(eval x)
  cmake_language(EVAL CODE "${x}")
  return()
endfunction()
eval("message(\"hi\")")
eval("message(\"hi\")")
file(GLOB_RECURSE k2_src RELATIVE "${NOH_ROOT}" "${NOH_ROOT}/src/k2/*.cpp" "${NOH_ROOT}/src/k2/*.h")
set(__step_v7 "${k2_src}")
while(__step_v7)
  list(POP_FRONT __step_v7 x)
  message("${x}")
endwhile()
unset(k2_src)
function(glob VAR dir)
  unset(__map_l2)
  set(__step_v8 ${ARGN})
  while(__step_v8)
    list(POP_FRONT __step_v8 it)
    list(APPEND __map_l2 "${dir}/${it}")
  endwhile()
  set(l "${__map_l2}")
  file(GLOB_RECURSE "${VAR}" RELATIVE "${dir}" ${l})
  return(PROPAGATE "${VAR}")
endfunction()
glob(k2_src "${NOH_ROOT}/src/k2" "*.cpp" "*.h")
set(__step_v9 "${k2_src}")
while(__step_v9)
  list(POP_FRONT __step_v9 x)
  message("yess: " "${x}")
endwhile()
glob(speedtree_src "${SPEEDTREE_SOURCE_DIR}" "*.cpp" "*.h")
glob(speedtree_hdr "${SPEEDTREE_INCLUDE_DIR}" "*.h")
set(__step_v10 "${speedtree_src}")
while(__step_v10)
  list(POP_FRONT __step_v10 x)
  message("speedtree src: " "${x}")
endwhile()
set(__step_v11 "${speedtree_hdr}")
while(__step_v11)
  list(POP_FRONT __step_v11 x)
  message("speedtree hdr: " "${x}")
endwhile()
