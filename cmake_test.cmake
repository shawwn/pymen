cmake_policy(VERSION "3.25.0")
set(reserved 
  ALL "\"=\"" "\"==\"" "\"+\"" "\"-\"" "\"%\"" "\"*\"" "\"/\"" "\"<\"" "\">\"" "\"<=\"" "\">=\""
  JS "\"break\"" "\"case\"" "\"catch\"" "\"class\"" "\"const\"" "\"continue\"" "\"debugger\"" "\"default\"" "\"delete\"" "\"do\"" "\"else\"" "\"eval\"" "\"finally\"" "\"for\"" "\"function\"" "\"if\"" "\"import\"" "\"in\"" "\"instanceof\"" "\"let\"" "\"return\"" "\"switch\"" "\"throw\"" "\"try\"" "\"typeof\"" "\"var\"" "\"void\"" "\"with\""
  LUA "\"and\"" "\"end\"" "\"in\"" "\"load\"" "\"repeat\"" "\"while\"" "\"break\"" "\"false\"" "\"local\"" "\"return\"" "\"do\"" "\"for\"" "\"nil\"" "\"then\"" "\"else\"" "\"function\"" "\"not\"" "\"true\"" "\"elseif\"" "\"if\"" "\"or\"" "\"until\""
  PY "\"and\"" "\"except\"" "\"lambda\"" "\"with\"" "\"as\"" "\"finally\"" "\"nonlocal\"" "\"while\"" "\"assert\"" "\"false\"" "\"None\"" "\"yield\"" "\"break\"" "\"for\"" "\"not\"" "\"class\"" "\"from\"" "\"or\"" "\"continue\"" "\"global\"" "\"pass\"" "\"def\"" "\"if\"" "\"raise\"" "\"del\"" "\"import\"" "\"return\"" "\"elif\"" "\"in\"" "\"True\"" "\"else\"" "\"is\"" "\"try\"" "\"from\"" "\"str\"" "\"print\""
  CMAKE "\"set\"" "\"foreach\"" "\"endforeach\"" "\"while\"" "\"endwhile\"" "\"if\"" "\"elseif\"" "\"else\"" "\"block\"" "\"endblock\"" "\"macro\"" "\"endmacro\"" "\"function\"" "\"endfunction\"" "\"break\"" "\"return\"" "\"continue\"" "\"AND\"" "\"OR\"" "\"TRUE\"" "\"FALSE\"" "\"ON\"" "\"OFF\"" "\"Y\"" "\"N\""
)
message("hi")
message("${reserved}")
message("${reserved}")
if(4 GREATER 3)
  message("yes")
else()
  message("no")
endif()
string(LENGTH "foo" _N)
message("${_N}")
function(foo VAR)
  set("${VAR}" 42)
  return(PROPAGATE "${VAR}")
endfunction()
foo(X)
message("${X}")
function(strlen x VAR)
  string(LENGTH "${x}" "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
strlen("foobar" _N)
message("$N: " "${_N}")
unset(_N)
function(count x VAR)
  list(LENGTH x "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
function(err)
  message(FATAL_ERROR ${ARGN})
  return()
endfunction()
set(l "a" "b" "c" "d" "e" "f" "g")
count("${l}" _N)
message("count: " "${_N}")
unset(_N)
set(__e1 "")
if(4 GREATER 3 AND 2)
  set(__e1 "yes")
else()
  set(__e1 "no")
endif()
message("${__e1}")
set(RGBA_LIST0 0 0 0 255 0 0 255 0 255 0 255 0 0 255 255 0)
message("${RGBA_LIST0}")
message("${RGBA_LIST0}")
set(RGBA_LIST0 0 0 0 255 0 0 255 0 255 0 255 0 0 255 255 0)
while(RGBA_LIST0)
  list(POP_FRONT RGBA_LIST0 R G B A)
  message(STATUS "R=${R}, G=${G}, B=${B}, A=${A}")
endwhile()
set(__step_v1 0 0 0 255 0 0 255 0 255 0 255 0 0 255 255 0)
while(__step_v1)
  list(POP_FRONT __step_v1 R G B A)
  message(STATUS "R=${R}, G=${G}, B=${B}, A=${A}")
endwhile()
set(__step_v2 "a" "b" "c" "d")
while(__step_v2)
  list(POP_FRONT __step_v2 x)
  message("${x}")
endwhile()
message("$ENV{PATH}")
function(replace input pattern replacement VAR)
  string(REPLACE "${pattern}" "${replacement}" "${VAR}" "${input}")
  return(PROPAGATE "${VAR}")
endfunction()
replace("$ENV{PATH}" ":" ";" PATH)
message("$PATH: " "${PATH}")
set(__step_v3 "${PATH}")
while(__step_v3)
  list(POP_FRONT __step_v3 x)
  message("PATH:" "${x}")
endwhile()
function(blank63 x VAR)
  if("${x}" STREQUAL "")
    set("${VAR}" ON)
  else()
    set("${VAR}" OFF)
  endif()
  return(PROPAGATE "${VAR}")
endfunction()
function(is63 x VAR)
  strlen("${x}" n)
  set(__e2 "")
  if("${n}" GREATER 0)
    set(__e2 ON)
  else()
    set(__e2 OFF)
  endif()
  set("${VAR}" "${__e2}")
  return(PROPAGATE "${VAR}")
endfunction()
set(HOME "$ENV{HOME}")
set(NOH_ROOT "$ENV{HOME}/ml/noh4")
set(SPEEDTREE_DIR "${NOH_ROOT}/lib/SpeedTree")
set(SPEEDTREE_SOURCE_DIR "${SPEEDTREE_DIR}/source/SourceCode")
set(SPEEDTREE_INCLUDE_DIR "${SPEEDTREE_DIR}/include")
file(GLOB_RECURSE SpeedTree___cpp "${SPEEDTREE_SOURCE_DIR}/*.cpp")
set(__step_v4 "${SpeedTree___cpp}")
while(__step_v4)
  list(POP_FRONT __step_v4 x)
  message("${x}")
endwhile()
function(match63 input pattern VAR)
  string(REGEX MATCH "${pattern}" x "${input}")
  is63("${x}" "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
file(GLOB_RECURSE files "*")
set(__step_v5 "${files}")
while(__step_v5)
  list(POP_FRONT __step_v5 x)
  match63("${x}" "[.]l$" ok)
  if("${ok}")
    message("${x}")
  endif()
endwhile()
blank63("foo" _)
message(STATUS "(blank? \"foo\"): " "${_}")
blank63("" _)
message(STATUS "(blank? \"\"): " "${_}")
function(call f)
  cmake_language(CALL "${f}" ${ARGN})
  return()
endfunction()
call(message "hi")
function(eval x)
  cmake_language(EVAL CODE "${x}")
  return()
endfunction()
eval("message(\"hi\")")
eval("message(\"hi\")")
file(GLOB_RECURSE k2_src RELATIVE "${NOH_ROOT}" "${NOH_ROOT}/src/k2/*.cpp" "${NOH_ROOT}/src/k2/*.h")
set(__step_v6 "${k2_src}")
while(__step_v6)
  list(POP_FRONT __step_v6 x)
  message("foo: " "${x}")
  break()
endwhile()
unset(k2_src)
function(add VAR)
  set(__step_v7 "${ARGN}")
  while(__step_v7)
    list(POP_FRONT __step_v7 x)
    list(APPEND "${VAR}" "${x}")
  endwhile()
  return(PROPAGATE "${VAR}")
endfunction()
function(strjoin VAR)
  string(JOIN "" "${VAR}" ${ARGN})
  return(PROPAGATE "${VAR}")
endfunction()
unset(x)
strjoin(x "foo" "bar" "${speedtree_src}")
message("${x}")
strjoin(__cat_x "${NOH_ROOT}" "/src/k2")
message("${__cat_x}")
function(globdir VAR dir)
  unset(__map_l1)
  set(__step_v8 ${ARGN})
  while(__step_v8)
    list(POP_FRONT __step_v8 it)
    strjoin(__cat_x1 "${dir}" "/" "${it}")
    list(APPEND __map_l1 "${__cat_x1}")
  endwhile()
  file(GLOB_RECURSE "${VAR}" RELATIVE "${dir}" ${__map_l1})
  return(PROPAGATE "${VAR}")
endfunction()
strjoin(__cat_x2 "${NOH_ROOT}" "/src/k2")
globdir(k2_src "${__cat_x2}" "*.cpp" "*.h")
set(__step_v9 "${k2_src}")
while(__step_v9)
  list(POP_FRONT __step_v9 x)
  message("k2_src: " "${x}")
  break()
endwhile()
globdir(speedtree_src "${SPEEDTREE_SOURCE_DIR}" "*.cpp" "*.h")
globdir(speedtree_hdr "${SPEEDTREE_INCLUDE_DIR}" "*.h")
set(__step_v10 "${speedtree_src}")
while(__step_v10)
  list(POP_FRONT __step_v10 x)
  message("speedtree src: " "${x}")
  break()
endwhile()
set(__step_v11 "${speedtree_hdr}")
while(__step_v11)
  list(POP_FRONT __step_v11 x)
  message("speedtree hdr: " "${x}")
  break()
endwhile()
globdir(speedtree_src "${SPEEDTREE_SOURCE_DIR}" "*.cpp" "*.h")
set(__step_v12 ${speedtree_src})
while(__step_v12)
  list(POP_FRONT __step_v12 x)
  message("yay: " "${x}")
  break()
endwhile()
function(match63 input pattern VAR)
  string(REGEX MATCH "${pattern}" x "${input}")
  is63("${x}" "${VAR}")
  return(PROPAGATE "${VAR}")
endfunction()
file(GLOB_RECURSE files "*")
set(__step_v13 "${files}")
while(__step_v13)
  list(POP_FRONT __step_v13 x)
  match63("${x}" "[.]l$" ok)
  if("${ok}")
    message("YAY: " "${x}")
    break()
  endif()
endwhile()
file(GLOB_RECURSE files "*")
set(__step_v14 "${files}")
while(__step_v14)
  list(POP_FRONT __step_v14 x)
  match63("${x}" "[.]l$" __ok)
  if("${__ok}")
    message("YAY2: " "${x}")
    break()
  endif()
endwhile()
globdir(files "${CMAKE_CURRENT_LIST_DIR}" "*")
set(__step_v15 "${files}")
while(__step_v15)
  list(POP_FRONT __step_v15 x)
  match63("${x}" "[.]l$" __ok1)
  if("${__ok1}")
    message("YAY3: " "${x}")
    break()
  endif()
endwhile()
file(GLOB_RECURSE __file_x "*")
set(__step_v16 "${__file_x}")
while(__step_v16)
  list(POP_FRONT __step_v16 x)
  match63("${x}" "[.]l$" __ok2)
  if("${__ok2}")
    message("YAY4: " "${x}")
    break()
  endif()
endwhile()
add(l "foo" "bar" "baz")
set(__step_v17 "${l}")
while(__step_v17)
  list(POP_FRONT __step_v17 x)
  message("${x}")
  break()
endwhile()
message("${l}")
message(${l})
file(GLOB_RECURSE __file_x1 "*")
set(__step_v18 "${__file_x1}")
while(__step_v18)
  list(POP_FRONT __step_v18 x)
  message("YAY5: " "${x}")
  break()
endwhile()
file(GLOB_RECURSE __file_x2 "*")
set(__step_v19 "${__file_x2}")
while(__step_v19)
  list(POP_FRONT __step_v19 x)
  message("YAY6: " "${x}")
  break()
endwhile()
string(MAKE_C_IDENTIFIER "Foo Bar" _Y)
string(TOLOWER "${_Y}" X)
message("${X}")
